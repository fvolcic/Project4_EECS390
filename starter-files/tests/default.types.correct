ProgramNode {
  FunctionDeclNode {
    TypeNameNode: void {
      NameNode {
        void
      }
    }
    NameNode {
      main
    }
    ParameterNode {
      ArrayTypeNameNode: string[] {
        TypeNameNode: string {
          NameNode {
            string
          }
        }
      }
      NameNode {
        args
      }
    }
    VarDeclNode {
      TypeNameNode: foo {
        NameNode {
          foo
        }
      }
      NameNode {
        f
      }
    }
    VarDeclNode {
      TypeNameNode: bar {
        NameNode {
          bar
        }
      }
      NameNode {
        b
      }
    }
    VarDeclNode {
      TypeNameNode: baz {
        NameNode {
          baz
        }
      }
      NameNode {
        z
      }
    }
    BlockNode {
      ExpressionStatementNode {
        AssignNode: foo {
          NameExpressionNode: foo {
            NameNode {
              f
            }
          }
          NewNode: foo {
            TypeNameNode: foo {
              NameNode {
                foo
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        AssignNode: bar {
          NameExpressionNode: bar {
            NameNode {
              b
            }
          }
          NewNode: bar {
            TypeNameNode: bar {
              NameNode {
                bar
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        AssignNode: baz {
          NameExpressionNode: baz {
            NameNode {
              z
            }
          }
          NewNode: baz {
            TypeNameNode: baz {
              NameNode {
                baz
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          CallNode: string {
            NameNode {
              int_to_string
            }
            FieldAccessNode: int {
              NameExpressionNode: foo {
                NameNode {
                  f
                }
              }
              NameNode {
                x
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          CallNode: string {
            NameNode {
              boolean_to_string
            }
            EqualNode: boolean {
              FieldAccessNode: foo {
                NameExpressionNode: bar {
                  NameNode {
                    b
                  }
                }
                NameNode {
                  f
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
      ExpressionStatementNode {
        CallNode: void {
          NameNode {
            println
          }
          CallNode: string {
            NameNode {
              boolean_to_string
            }
            EqualNode: boolean {
              FieldAccessNode: string[] {
                NameExpressionNode: bar {
                  NameNode {
                    b
                  }
                }
                NameNode {
                  a
                }
              }
              NullNode: null {
              }
            }
          }
        }
      }
    }
  }
  StructDeclNode: foo {
    NameNode {
      foo
    }
    VarDeclNode {
      TypeNameNode: int {
        NameNode {
          int
        }
      }
      NameNode {
        x
      }
    }
  }
  StructDeclNode: bar {
    NameNode {
      bar
    }
    VarDeclNode {
      TypeNameNode: foo {
        NameNode {
          foo
        }
      }
      NameNode {
        f
      }
    }
    VarDeclNode {
      TypeNameNode: int {
        NameNode {
          int
        }
      }
      NameNode {
        x
      }
    }
    VarDeclNode {
      ArrayTypeNameNode: string[] {
        TypeNameNode: string {
          NameNode {
            string
          }
        }
      }
      NameNode {
        a
      }
    }
  }
  StructDeclNode: baz {
    NameNode {
      baz
    }
  }
}
